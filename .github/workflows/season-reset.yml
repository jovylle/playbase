name: 🏆 Automatic Season Reset

on:
  schedule:
    # Run every 3 months on the 15th at 00:00 UTC
    # Jan 15, Apr 15, Jul 15, Oct 15
    - cron: '0 0 15 1,4,7,10 *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      confirm_reset:
        description: 'Type "RESET" to confirm season reset'
        required: true
        default: ''

jobs:
  season-reset:
    runs-on: ubuntu-latest
    
    steps:
      - name: 🚀 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🔐 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: 📦 Install Dependencies
        run: |
          npm install @octokit/rest jsonwebtoken
      
      - name: 🏆 Reset Season
        env:
          GITHUB_APP_ID: ${{ secrets.GITHUB_APP_ID }}
          GITHUB_INSTALLATION_ID: ${{ secrets.GITHUB_INSTALLATION_ID }}
          GITHUB_PRIVATE_KEY: ${{ secrets.GITHUB_PRIVATE_KEY }}
        run: |
          # Create a temporary script to run the season reset
          cat > season-reset-script.js << 'EOF'
          const { Octokit } = require('@octokit/rest');
          const jwt = require('jsonwebtoken');
          
          async function resetSeason() {
            try {
              console.log('🌱 Starting automatic season reset...');
              
              // Get GitHub App credentials
              const appId = process.env.GITHUB_APP_ID;
              const installationId = process.env.GITHUB_INSTALLATION_ID;
              const privateKey = process.env.GITHUB_PRIVATE_KEY?.replace(/\\n/g, '\n');
              
              if (!appId || !installationId || !privateKey) {
                throw new Error('Missing GitHub App credentials');
              }
              
              // Initialize GitHub client
              const octokit = new Octokit({
                auth: \`Bearer \${await getGitHubToken(appId, installationId, privateKey)}\`
              });
              
              const owner = 'jovylle';
              const repo = 'playbase';
              const branch = 'master';
              
              // Get current season info
              const currentDate = new Date();
              const seasonStart = new Date('2025-01-15T00:00:00Z');
              const daysSinceStart = Math.floor((currentDate - seasonStart) / (1000 * 60 * 60 * 24));
              const currentSeason = Math.floor(daysSinceStart / 90) + 1; // 90 days per season
              
              console.log(\`📅 Current season: \${currentSeason}\`);
              
              // Create new empty leaderboard for next season
              const newTopScores = {
                top: [],
                last_updated: currentDate.toISOString(),
                season: currentSeason + 1,
                season_start: new Date(seasonStart.getTime() + (currentSeason * 90 * 24 * 60 * 60 * 1000)).toISOString()
              };
              
              const newLatestScore = {
                latest: null,
                last_updated: currentDate.toISOString(),
                season: currentSeason + 1
              };
              
              // Archive current season data
              const archiveData = {
                season: currentSeason,
                season_end: currentDate.toISOString(),
                top_scores: [],
                total_players: 0
              };
              
              // Get current top scores for archive
              try {
                const topResponse = await octokit.repos.getContent({
                  owner,
                  repo,
                  path: 'reaction/top.json',
                  ref: branch
                });
                
                if (topResponse.data && topResponse.data.content) {
                  const currentTop = JSON.parse(Buffer.from(topResponse.data.content, 'base64').toString());
                  archiveData.top_scores = currentTop.top || [];
                  archiveData.total_players = currentTop.top ? currentTop.top.length : 0;
                }
              } catch (error) {
                console.log('Could not fetch current top scores for archive:', error.message);
              }
              
              // Create archive file
              const archiveContent = Buffer.from(JSON.stringify(archiveData, null, 2)).toString('base64');
              await octokit.repos.createOrUpdateFileContents({
                owner,
                repo,
                path: \`reaction/archive/season-\${currentSeason}.json\`,
                message: \`🏆 Archive Season \${currentSeason} data\`,
                content: archiveContent,
                branch
              });
              
              console.log(\`📁 Archived Season \${currentSeason} data\`);
              
              // Reset top.json
              const topContent = Buffer.from(JSON.stringify(newTopScores, null, 2)).toString('base64');
              await octokit.repos.createOrUpdateFileContents({
                owner,
                repo,
                path: 'reaction/top.json',
                message: \`🌱 Reset leaderboard for Season \${currentSeason + 1}\`,
                content: topContent,
                branch
              });
              
              console.log(\`🏆 Reset top.json for Season \${currentSeason + 1}\`);
              
              // Reset latest.json
              const latestContent = Buffer.from(JSON.stringify(newLatestScore, null, 2)).toString('base64');
              await octokit.repos.createOrUpdateFileContents({
                owner,
                repo,
                path: 'reaction/latest.json',
                message: \`🌱 Reset latest score for Season \${currentSeason + 1}\`,
                content: latestContent,
                branch
              });
              
              console.log(\`🎮 Reset latest.json for Season \${currentSeason + 1}\`);
              
              console.log(\`✅ Season \${currentSeason} archived, Season \${currentSeason + 1} started!\`);
              
            } catch (error) {
              console.error('❌ Season reset failed:', error);
              process.exit(1);
            }
          }
          
          // Helper function to get GitHub token
          async function getGitHubToken(appId, installationId, privateKey) {
            const now = Math.floor(Date.now() / 1000);
            const payload = {
              iat: now - 60,
              exp: now + 600,
              iss: appId
            };
            
            const token = jwt.sign(payload, privateKey, { algorithm: 'RS256' });
            
            const response = await fetch(\`https://api.github.com/app/installations/\${installationId}/access_tokens\`, {
              method: 'POST',
              headers: {
                'Authorization': \`Bearer \${token}\`,
                'Accept': 'application/vnd.github.v3+json'
              }
            });
            
            const data = await response.json();
            return data.token;
          }
          
          // Run the reset
          resetSeason();
          EOF
          
          node season-reset-script.js
      
      - name: 🎉 Season Reset Complete
        run: |
          echo "🏆 Season reset completed successfully!"
          echo "📅 New season started at $(date)"
